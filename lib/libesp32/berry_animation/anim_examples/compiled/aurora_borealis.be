# Generated Berry code from Animation DSL
# Source: aurora_borealis.anim
# Generated automatically
# 
# This file was automatically generated by compile_all_dsl_examples.sh
# Do not edit manually - changes will be overwritten

# Original DSL source:
# # Aurora Borealis - Northern lights simulation
# # Flowing green and purple aurora colors
# 
# #strip length 60
# 
# # Define aurora color palette
# palette aurora_colors = [
#   (0, 0x000022),    # Dark night sky
#   (64, 0x004400),   # Dark green
#   (128, 0x00AA44),  # Aurora green
#   (192, 0x44AA88),  # Light green
#   (255, 0x88FFAA)   # Bright aurora
# ]
# 
# # Secondary purple palette
# palette aurora_purple = [
#   (0, 0x220022),    # Dark purple
#   (64, 0x440044),   # Medium purple
#   (128, 0x8800AA),  # Bright purple
#   (192, 0xAA44CC),  # Light purple
#   (255, 0xCCAAFF)   # Pale purple
# ]
# 
# # Base aurora animation with slow flowing colors
# animation aurora_base = rich_palette_animation(
#   aurora_colors,  # palette
#   10s,            # cycle period
#   smooth,         # transition type (explicit for clarity)
#   180             # brightness (dimmed for aurora effect)
# )
# 
# sequence demo {
#   play aurora_base  # infinite duration (no 'for' clause)
# }
# 
# run demo

import animation

# Aurora Borealis - Northern lights simulation
# Flowing green and purple aurora colors
#strip length 60
# Define aurora color palette
# Auto-generated strip initialization (using Tasmota configuration)
var engine = animation.init_strip()

var aurora_colors_ = bytes("00000022" "40004400" "8000AA44" "C044AA88" "FF88FFAA")
# Secondary purple palette
var aurora_purple_ = bytes("00220022" "40440044" "808800AA" "C0AA44CC" "FFCCAAFF")
# Base aurora animation with slow flowing colors
var aurora_base_ = animation.rich_palette_animation(animation.global('aurora_colors_', 'aurora_colors'), 10000, animation.global('smooth_', 'smooth'), 180)
def sequence_demo()
  var steps = []
  steps.push(animation.create_play_step(animation.global('aurora_base_'), 0))  # infinite duration (no 'for' clause)
  var seq_manager = animation.SequenceManager(engine)
  seq_manager.start_sequence(steps)
  return seq_manager
end
# Start all animations/sequences
if global.contains('sequence_demo')
  var seq_manager = global.sequence_demo()
  engine.add_sequence_manager(seq_manager)
else
  engine.add_animation(animation.global('demo_'))
end
engine.start()
