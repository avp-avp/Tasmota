# Generated Berry code from Animation DSL
# Source: property_assignment_demo.anim
# Generated automatically
# 
# This file was automatically generated by compile_all_dsl_examples.sh
# Do not edit manually - changes will be overwritten

# Original DSL source:
# # Property Assignment Demo
# # Shows how to set animation properties after creation
# 
# strip length 60
# 
# # Define colors
# color red_custom = 0xFF0000
# color blue_custom = 0x0000FF
# color green_custom = 0x00FF00
# 
# # Create animations
# animation left_pulse = pulse_position_animation(red_custom, 15, 15, 3)
# animation center_pulse = pulse_position_animation(blue_custom, 30, 15, 3)
# animation right_pulse = pulse_position_animation(green_custom, 45, 15, 3)
# 
# # Set different opacities
# left_pulse.opacity = 255    # Full brightness
# center_pulse.opacity = 200  # Slightly dimmed
# right_pulse.opacity = 150   # More dimmed
# 
# # Set priorities (higher numbers have priority)
# left_pulse.priority = 10
# center_pulse.priority = 15   # Center has highest priority
# right_pulse.priority = 5
# 
# # Create a sequence that shows all three
# sequence demo {
#   play left_pulse for 3s
#   wait 500ms
#   play center_pulse for 3s
#   wait 500ms
#   play right_pulse for 3s
#   wait 500ms
#   
#   # Play all together for final effect
#   repeat 3 times:
#     play left_pulse for 2s
#     play center_pulse for 2s
#     play right_pulse for 2s
#     wait 1s
# }
# 
# run demo

import animation

# Property Assignment Demo
# Shows how to set animation properties after creation
var engine = animation.init_strip(60)
# Define colors
var red_custom_ = 0xFFFF0000
var blue_custom_ = 0xFF0000FF
var green_custom_ = 0xFF00FF00
# Create animations
var left_pulse_ = animation.pulse_position_animation(animation.global('red_custom_', 'red_custom'), 15, 15, 3)
var center_pulse_ = animation.pulse_position_animation(animation.global('blue_custom_', 'blue_custom'), 30, 15, 3)
var right_pulse_ = animation.pulse_position_animation(animation.global('green_custom_', 'green_custom'), 45, 15, 3)
# Set different opacities
animation.global('left_pulse_').opacity = 255  # Full brightness
animation.global('center_pulse_').opacity = 200  # Slightly dimmed
animation.global('right_pulse_').opacity = 150  # More dimmed
# Set priorities (higher numbers have priority)
animation.global('left_pulse_').priority = 10
animation.global('center_pulse_').priority = 15  # Center has highest priority
animation.global('right_pulse_').priority = 5
# Create a sequence that shows all three
def sequence_demo()
  var steps = []
  steps.push(animation.create_play_step(animation.global('left_pulse_'), 3000))
  steps.push(animation.create_wait_step(500))
  steps.push(animation.create_play_step(animation.global('center_pulse_'), 3000))
  steps.push(animation.create_wait_step(500))
  steps.push(animation.create_play_step(animation.global('right_pulse_'), 3000))
  steps.push(animation.create_wait_step(500))
  # Play all together for final effect
  for repeat_i : 0..3-1
    steps.push(animation.create_play_step(animation.global('left_pulse_'), 2000))
    steps.push(animation.create_play_step(animation.global('center_pulse_'), 2000))
    steps.push(animation.create_play_step(animation.global('right_pulse_'), 2000))
    steps.push(animation.create_wait_step(1000))
  end
  var seq_manager = animation.SequenceManager(engine)
  seq_manager.start_sequence(steps)
  return seq_manager
end
# Start all animations/sequences
if global.contains('sequence_demo')
  var seq_manager = global.sequence_demo()
  engine.add_sequence_manager(seq_manager)
else
  engine.add_animation(animation.global('demo_'))
end
engine.start()
